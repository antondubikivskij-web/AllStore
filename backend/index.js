const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const bcrypt = require('bcryptjs');
require('dotenv').config({ path: './config.env' });

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è admin.html)
app.use(express.static(__dirname));

// Telegram Bot Setup
let bot = null;
if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_TOKEN !== 'your_telegram_bot_token_here') {
  bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
}

// Telegram notification function
const sendTelegramNotification = async (message, product = null, customChatId = null) => {
  if (bot) {
    const chatId = customChatId || process.env.TELEGRAM_CHANNEL_ID;
    try {
      if (product) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∏–∂–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
        const hasDiscount = product.discount > 0;
        const discountedPrice = hasDiscount ? product.price * (1 - product.discount / 100) : product.price;
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—Ä–∞—Å–∏–≤—É –∫–∞—Ä—Ç–∫—É —Ç–æ–≤–∞—Ä—É
        let caption = `üÜï <b>–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ!</b>\n\n` +
          `üì¶ <b>${product.name}</b>\n`;
          
        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—ñ–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
        if (hasDiscount) {
          caption += `üí∞ –¶—ñ–Ω–∞: <s>${product.price} ‚Ç¥</s> ${discountedPrice.toFixed(2)} ‚Ç¥\n` +
                    `üè∑Ô∏è –ó–Ω–∏–∂–∫–∞: ${product.discount}%\n`;
        } else {
          caption += `üí∞ –¶—ñ–Ω–∞: ${product.price} ‚Ç¥\n`;
        }
        
        caption += `üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${product.category || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n` +
          `üì¶ –ó–∞–ª–∏—à–æ–∫: ${product.stock || 0} —à—Ç.\n` +
          `üìù –û–ø–∏—Å: ${product.description || '–ë–µ–∑ –æ–ø–∏—Å—É'}\n\n` +
          `üõí –ó–∞–º–æ–≤–ª—è–π—Ç–µ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ!`;
        
        if (product.image) {
          await bot.sendPhoto(chatId, product.image, {
            caption: caption,
            parse_mode: 'HTML'
          });
        } else {
          await bot.sendMessage(chatId, caption, { 
            parse_mode: 'HTML' 
          });
        }
      } else {
        // –ó–≤–∏—á–∞–π–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.sendMessage(chatId, message, { 
          parse_mode: 'HTML' 
        });
      }
    } catch (error) {
      console.error('Telegram notification error:', error);
    }
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./store.db', (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
  } else {
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    // –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é products –Ω–∞–≤—ñ—Ç—å —É —Å—Ç–∞—Ä—ñ–π –±–∞–∑—ñ
    db.run(`CREATE TABLE IF NOT EXISTS products (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      price REAL NOT NULL,
      description TEXT,
      image TEXT,
      category TEXT,
      stock INTEGER DEFAULT 0,
      discount REAL DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã products:', err);
      } else {
        // –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é admins –Ω–∞–≤—ñ—Ç—å —É —Å—Ç–∞—Ä—ñ–π –±–∞–∑—ñ
        db.run(`CREATE TABLE IF NOT EXISTS admins (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          username TEXT UNIQUE,
          password TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`, (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã admins:', err);
          } else {
            initDatabase();
          }
        });
      }
    });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
function initDatabase() {
  // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    description TEXT,
    image TEXT,
    category TEXT,
    stock INTEGER DEFAULT 0,
    discount REAL DEFAULT 0,
    specifications TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã
  db.run(`CREATE TABLE IF NOT EXISTS cart (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER,
    quantity INTEGER DEFAULT 1,
    session_id TEXT,
    FOREIGN KEY (product_id) REFERENCES products (id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_name TEXT,
    customer_phone TEXT,
    customer_email TEXT,
    delivery_address TEXT,
    total_amount REAL,
    status TEXT DEFAULT 'pending',
    items TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–æ–≤
  db.run(`CREATE TABLE IF NOT EXISTS admins (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    password TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞
  db.run(`CREATE TABLE IF NOT EXISTS settings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    key TEXT UNIQUE,
    value TEXT,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  db.run(`INSERT OR IGNORE INTO settings (key, value) VALUES ('site_enabled', 'true')`);
  db.run(`INSERT OR IGNORE INTO settings (key, value) VALUES ('maintenance_message', '–°–∞–π—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ. –°–∫–æ—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–º–æ—Å—è!')`);
  db.run(`INSERT OR IGNORE INTO settings (key, value) VALUES ('show_discounts', 'true')`);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–æ–≤–∞—Ä–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
  db.get('SELECT COUNT(*) as count FROM products', (err, row) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ–≤–∞—Ä—ñ–≤:', err);
    } else if (row.count === 0) {
      console.log('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.');
    } else {
      console.log(`–í –±–∞–∑—ñ –¥–∞–Ω–∏—Ö ${row.count} —Ç–æ–≤–∞—Ä—ñ–≤.`);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ specifications –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  db.run(`ALTER TABLE products ADD COLUMN specifications TEXT DEFAULT ''`, (err) => {
    if (err && !err.message.includes('duplicate column name')) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è specifications:', err);
    } else {
      console.log('–ü–æ–ª–µ specifications –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const adminPassword = bcrypt.hashSync(process.env.ADMIN_PASSWORD || 'admin123', 10);
  db.run(`INSERT OR IGNORE INTO admins (username, password) VALUES (?, ?)`,
    [process.env.ADMIN_USERNAME || 'admin', adminPassword]);
}

// –ú–∞—Ä—à—Ä—É—Ç—ã API

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/ping', (req, res) => {
  res.json({
    status: 'active',
    timestamp: new Date().toISOString(),
    message: '–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω'
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
app.get('/api/products', (req, res) => {
  db.all('SELECT *, (price - (price * discount / 100)) as discounted_price FROM products ORDER BY created_at DESC', (err, rows) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:', err);
      if (err && err.message) {
        console.error('–¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏:', err.message);
      }
      if (err && err.stack) {
        console.error('–°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏:', err.stack);
      }
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
app.get('/api/products/discounted', (req, res) => {
  db.all('SELECT *, (price - (price * discount / 100)) as discounted_price FROM products WHERE discount > 0 ORDER BY discount DESC', (err, rows) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –∑—ñ –∑–Ω–∏–∂–∫–æ—é:', err);
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.get('/api/products/:id', (req, res) => {
  db.get('SELECT * FROM products WHERE id = ?', [req.params.id], (err, row) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    if (!row) {
      res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    res.json(row);
  });
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–∞–¥–º–∏–Ω)
app.post('/api/admin/products', (req, res) => {
  const { name, price, description, category, stock, image, discount, specifications } = req.body;
  
  db.run(`INSERT INTO products (name, price, description, category, stock, image, discount, specifications) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
    [name, price, description, category, stock, image, discount || 0, specifications || ''], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    const id = this.lastID;
    const newProduct = {
      id,
      name,
      price,
      description,
      category,
      stock,
      image,
      discount
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –∫–∞—Ä—Ç–∫–æ–π —Ç–æ–≤–∞—Ä–∞
    sendTelegramNotification(null, newProduct);
    
    res.json({ id: this.lastID, message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω' });
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (–∞–¥–º–∏–Ω)
app.put('/api/admin/products/:id', (req, res) => {
  const { name, price, description, category, stock, image, discount, specifications } = req.body;
  
  db.run(`UPDATE products SET name = ?, price = ?, description = ?, category = ?, stock = ?, image = ?, discount = ?, specifications = ? WHERE id = ?`,
    [name, price, description, category, stock, image, discount || 0, specifications || '', req.params.id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    const updatedProduct = {
      id: req.params.id,
      name,
      price,
      description,
      category,
      stock,
      image,
      discount
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∫–æ–π —Ç–æ–≤–∞—Ä–∞
    sendTelegramNotification(`‚úèÔ∏è <b>–¢–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>`, updatedProduct);
    
    res.json({ message: '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' });
  });
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–∞–¥–º–∏–Ω)
app.delete('/api/admin/products/:id', (req, res) => {
  db.get('SELECT name FROM products WHERE id = ?', [req.params.id], (err, product) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    db.run('DELETE FROM products WHERE id = ?', [req.params.id], function(err) {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      
      if (product) {
        sendTelegramNotification(`üóëÔ∏è <b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!</b>\n\nüì¶ <b>${product.name}</b>`);
      }
      
      res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω' });
    });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)
app.get('/api/admin/orders', (req, res) => {
  db.all('SELECT * FROM orders ORDER BY created_at DESC', (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–∞–¥–º–∏–Ω)
app.put('/api/admin/orders/:id/status', (req, res) => {
  const { status } = req.body;
  
  db.run('UPDATE orders SET status = ? WHERE id = ?', [status, req.params.id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    sendTelegramNotification(`üìã <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\nüÜî –ó–∞–∫–∞–∑ #${req.params.id}\nüìä –°—Ç–∞—Ç—É—Å: ${status}`);
    
    res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' });
  });
});

// –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
app.post('/api/orders', (req, res) => {
  const { customer_name, customer_phone, customer_email, delivery_address, total_amount, items } = req.body;
  
  db.run(`INSERT INTO orders (customer_name, customer_phone, customer_email, delivery_address, total_amount, items) VALUES (?, ?, ?, ?, ?, ?)`,
    [customer_name, customer_phone, customer_email, delivery_address, total_amount, JSON.stringify(items)], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    const orderId = this.lastID;
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å
    const itemsList = items.map(item => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∏–∂–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
      const hasDiscount = item.discount > 0;
      let itemText = `‚Ä¢ ${item.name} x${item.quantity}`;
      
      // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—ñ–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
      if (hasDiscount) {
        itemText += ` ‚Äî <s>${item.price} ‚Ç¥</s> ${parseFloat(item.finalPrice).toFixed(2)} ‚Ç¥ (-${item.discount}%)`;
      } else {
        itemText += ` ‚Äî ${item.price} ‚Ç¥`;
      }
      
      return itemText;
    }).join('\n');
    sendTelegramNotification(
      `üõí <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\nüÜî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderId}\nüë§ ${customer_name}\nüìû ${customer_phone}\nüè† <b>–ê–¥—Ä–µ—Å–∞:</b> ${delivery_address || '‚Äî'}\nüí∞ –°—É–º–∞: ${total_amount} ‚Ç¥\n\nüì¶ –¢–æ–≤–∞—Ä–∏:\n${itemsList}`,
      null,
      process.env.TELEGRAM_ORDERS_CHANNEL_ID
    );
    
    res.json({ 
      id: orderId, 
      message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      order: {
        id: orderId,
        customer_name,
        customer_phone,
        customer_email,
        delivery_address,
        total_amount,
        items,
        status: 'pending',
        created_at: new Date().toISOString()
      }
    });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
app.get('/api/orders/:id', (req, res) => {
  db.get('SELECT * FROM orders WHERE id = ?', [req.params.id], (err, order) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    if (!order) {
      res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –æ–±—ä–µ–∫—Ç
    try {
      order.items = JSON.parse(order.items);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ items:', e);
      order.items = [];
    }
    
    res.json(order);
  });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
app.post('/api/admin/login', (req, res) => {
  const { username, password } = req.body;
  
  console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username, password: password ? '***' : 'undefined' });
  
  db.get('SELECT * FROM admins WHERE username = ?', [username], (err, admin) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ë–î:', err);
      res.status(500).json({ error: err.message });
      return;
    }
    
    console.log('–ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω:', admin ? '–¥–∞' : '–Ω–µ—Ç');
    
    if (!admin) {
      res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    
    const isValidPassword = bcrypt.compareSync(password, admin.password);
    console.log('–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π:', isValidPassword);
    
    if (!isValidPassword) {
      res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
      return;
    }
    
    res.json({ message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', admin: { id: admin.id, username: admin.username } });
  });
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
app.post('/api/cart', (req, res) => {
  const { product_id, quantity = 1, session_id } = req.body;
  
  db.run('INSERT INTO cart (product_id, quantity, session_id) VALUES (?, ?, ?)',
    [product_id, quantity, session_id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ id: this.lastID, message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É' });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
app.get('/api/cart/:session_id', (req, res) => {
  const session_id = req.params.session_id || 'default';
  
  db.all(`
    SELECT c.id, c.quantity, p.id as product_id, p.name, p.price, p.description, p.image
    FROM cart c
    JOIN products p ON c.product_id = p.id
    WHERE c.session_id = ?
  `, [session_id], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
app.delete('/api/cart/:id', (req, res) => {
  db.run('DELETE FROM cart WHERE id = ?', [req.params.id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
app.put('/api/cart/:id', (req, res) => {
  const { quantity } = req.body;
  
  db.run('UPDATE cart SET quantity = ? WHERE id = ?', [quantity, req.params.id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' });
  });
});

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/search', (req, res) => {
  const { q, category } = req.query;
  let query = 'SELECT * FROM products WHERE 1=1';
  let params = [];

  if (q) {
    query += ' AND (name LIKE ? OR description LIKE ?)';
    params.push(`%${q}%`, `%${q}%`);
  }

  if (category) {
    query += ' AND category = ?';
    params.push(category);
  }

  db.all(query, params, (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
app.get('/api/categories', (req, res) => {
  db.all('SELECT * FROM categories ORDER BY name', (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∞–¥–º–∏–Ω)
app.post('/api/admin/categories', (req, res) => {
  const { name } = req.body;
  
  if (!name || name.trim() === '') {
    res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    return;
  }
  
  db.run(`INSERT INTO categories (name) VALUES (?)`, [name], function(err) {
    if (err) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
      if (err.message.includes('UNIQUE constraint failed')) {
        res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      } else {
        res.status(500).json({ error: err.message });
      }
      return;
    }
    
    res.json({ id: this.lastID, name, message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞' });
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∞–¥–º–∏–Ω)
app.put('/api/admin/categories/:id', (req, res) => {
  const { name } = req.body;
  
  if (!name || name.trim() === '') {
    res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    return;
  }
  
  db.run(`UPDATE categories SET name = ? WHERE id = ?`, [name, req.params.id], function(err) {
    if (err) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
      if (err.message.includes('UNIQUE constraint failed')) {
        res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      } else {
        res.status(500).json({ error: err.message });
      }
      return;
    }
    
    if (this.changes === 0) {
      res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }
    
    res.json({ id: parseInt(req.params.id), name, message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  });
});

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∞–¥–º–∏–Ω)
app.delete('/api/admin/categories/:id', (req, res) => {
  db.run(`DELETE FROM categories WHERE id = ?`, [req.params.id], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    if (this.changes === 0) {
      res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }
    
    res.json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/api/admin/stats', (req, res) => {
  db.get('SELECT COUNT(*) as total_products FROM products', (err, products) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    db.get('SELECT COUNT(*) as total_orders FROM orders', (err, orders) => {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      
      db.get('SELECT SUM(total_amount) as total_revenue FROM orders WHERE status = "completed"', (err, revenue) => {
        if (err) {
          res.status(500).json({ error: err.message });
          return;
        }
        
        res.json({
          total_products: products.total_products,
          total_orders: orders.total_orders,
          total_revenue: revenue.total_revenue || 0
        });
      });
    });
  });
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ Telegram
app.post('/api/admin/send-to-telegram', (req, res) => {
  db.all('SELECT * FROM products ORDER BY created_at DESC', (err, products) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    if (products.length === 0) {
      res.json({ message: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' });
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –≤ Telegram
    let sentCount = 0;
    products.forEach((product, index) => {
      setTimeout(() => {
        sendTelegramNotification(null, product);
        sentCount++;
        
        if (sentCount === products.length) {
          console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Telegram`);
        }
      }, index * 2000); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
    });
    
    res.json({ 
      message: `–û—Ç–ø—Ä–∞–≤–∫–∞ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Telegram –Ω–∞—á–∞—Ç–∞`,
      count: products.length 
    });
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/test', (req, res) => {
  res.json({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

// –ü–æ–ª—É—á–∏—Ç—å API —Å—Ç–∞—Ç—É—Å
app.get('/api', (req, res) => {
  res.send('API –ø—Ä–∞—Ü—é—î');
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
app.get('/admin', (req, res) => {
  res.sendFile(__dirname + '/admin.html');
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
app.get('/admin.html', (req, res) => {
  res.sendFile(__dirname + '/admin.html');
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.get('/api/admin/check', (req, res) => {
  db.all('SELECT id, username, created_at FROM admins', (err, admins) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ admins });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
app.get('/api/admin/settings', (req, res) => {
  db.all('SELECT * FROM settings', (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    const settings = {};
    rows.forEach(row => {
      settings[row.key] = row.value;
    });
    
    res.json(settings);
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
app.put('/api/admin/settings', (req, res) => {
  const { site_enabled, maintenance_message, show_discounts } = req.body;
  
  db.run('UPDATE settings SET value = ?, updated_at = CURRENT_TIMESTAMP WHERE key = ?', 
    [site_enabled, 'site_enabled'], function(err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if (show_discounts !== undefined) {
      db.run('UPDATE settings SET value = ?, updated_at = CURRENT_TIMESTAMP WHERE key = ?', 
        [show_discounts, 'show_discounts'], function(err) {
        if (err) {
          res.status(500).json({ error: err.message });
          return;
        }
        
        // –ï—Å–ª–∏ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
        if (maintenance_message) {
          db.run('UPDATE settings SET value = ?, updated_at = CURRENT_TIMESTAMP WHERE key = ?', 
            [maintenance_message, 'maintenance_message'], function(err) {
            if (err) {
              res.status(500).json({ error: err.message });
              return;
            }
            
            const action = site_enabled === 'true' ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
            const discountAction = show_discounts === 'true' ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
            sendTelegramNotification(`üîß <b>–°–∞–π—Ç ${action}!</b>\nüè∑Ô∏è <b>–ó–Ω–∏–∂–∫–∏ ${discountAction}!</b>\n\n${maintenance_message || ''}`);
            
            res.json({ 
              message: `–°–∞–π—Ç ${action}, –∑–Ω–∏–∂–∫–∏ ${discountAction}`,
              site_enabled: site_enabled === 'true',
              show_discounts: show_discounts === 'true'
            });
          });
        } else {
          const action = site_enabled === 'true' ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
          const discountAction = show_discounts === 'true' ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
          sendTelegramNotification(`üîß <b>–°–∞–π—Ç ${action}!</b>\nüè∑Ô∏è <b>–ó–Ω–∏–∂–∫–∏ ${discountAction}!</b>`);
          
          res.json({ 
            message: `–°–∞–π—Ç ${action}, –∑–Ω–∏–∂–∫–∏ ${discountAction}`,
            site_enabled: site_enabled === 'true',
            show_discounts: show_discounts === 'true'
          });
        }
      });
    } else if (maintenance_message) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
      db.run('UPDATE settings SET value = ?, updated_at = CURRENT_TIMESTAMP WHERE key = ?', 
        [maintenance_message, 'maintenance_message'], function(err) {
        if (err) {
          res.status(500).json({ error: err.message });
          return;
        }
        
        const action = site_enabled === 'true' ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
        sendTelegramNotification(`üîß <b>–°–∞–π—Ç ${action}!</b>\n\n${maintenance_message || ''}`);
        
        res.json({ message: `–°–∞–π—Ç ${action}` });
      });
    } else {
      const action = site_enabled === 'true' ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
      sendTelegramNotification(`üîß <b>–°–∞–π—Ç ${action}!</b>`);
      
      res.json({ message: `–°–∞–π—Ç ${action}` });
    }
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.get('/api/site-status', (req, res) => {
  db.get('SELECT value FROM settings WHERE key = ?', ['site_enabled'], (err, row) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    
    const isEnabled = row ? row.value === 'true' : true;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫
    db.get('SELECT value FROM settings WHERE key = ?', ['show_discounts'], (err, discountRow) => {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      
      const showDiscounts = discountRow ? discountRow.value === 'true' : true;
      
      if (!isEnabled) {
        db.get('SELECT value FROM settings WHERE key = ?', ['maintenance_message'], (err, msgRow) => {
          const message = msgRow ? msgRow.value : '–°–∞–π—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ. –°–∫–æ—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ–º–æ—Å—è!';
          res.json({ 
            enabled: false, 
            message: message,
            show_discounts: showDiscounts
          });
        });
      } else {
        res.json({ 
          enabled: true,
          show_discounts: showDiscounts
        });
      }
    });
  });
});

// –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞—Ö
const keepAlive = () => {
  console.log('–ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const currentTime = new Date().toLocaleTimeString();
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  db.get('SELECT COUNT(*) as count FROM products', (err, row) => {
    if (err) {
      console.error(`[${currentTime}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:`, err);
    } else {
      console.log(`[${currentTime}] –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ${row.count} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É API –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const http = require('http');
      const options = {
        hostname: 'localhost',
        port: PORT,
        path: '/api/ping',
        method: 'GET'
      };
      
      const req = http.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
        });
        res.on('end', () => {
          console.log(`[${currentTime}] Ping-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:`, JSON.parse(data).status);
        });
      });
      
      req.on('error', (error) => {
        console.error(`[${currentTime}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping-–∑–∞–ø—Ä–æ—Å–∞:`, error.message);
      });
      
      req.end();
    }
  });
};

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (2 –º–∏–Ω—É—Ç—ã)
const keepAliveMinutes = parseInt(process.env.KEEP_ALIVE_INTERVAL) || 2;
const keepAliveInterval = keepAliveMinutes * 60 * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
const keepAliveTimer = setInterval(keepAlive, keepAliveInterval);

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(keepAlive, 5000); // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
  if (bot) {
    console.log('Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
  }
  console.log(`–ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${keepAliveInterval/60000} –º–∏–Ω—É—Ç)`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (keepAliveTimer) {
    clearInterval(keepAliveTimer);
    console.log('–¢–∞–π–º–µ—Ä –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  db.close((err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
      console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
    }
    process.exit(0);
  });
});
